{"version":3,"sources":["logo.svg","common/header/header.js","services/services.js","components/card/card.js","components/search/search.js","components/pagination/pagination.js","pages/posts/posts.js","pages/postdetails/postdetails.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","fetchPosts","a","fetch","response","json","data","Card","cardData","id","title","body","imgSrc","postHandle","onClick","Search","searchInput","placeholder","type","onChange","e","target","value","Pagination","postsPerPage","totalPost","paginate","pageNumber","i","Math","ceil","push","useState","currentPagination","setCurrentPagination","paginationOnce","lastPagiIndex","firstPagiIndex","currentPaginationNumber","slice","aria-label","aria-hidden","map","number","key","length","Posts","posts","setPosts","loader","setLoader","error","setError","history","useHistory","currentPage","setCurrentPage","pData","pathname","state","useEffect","then","catch","lastPostIndex","firstPostIndex","currentPosts","fiteredPosts","filter","post","includes","PostDetails","useLocation","App","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ef8c1389.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from '../../logo.svg';\nimport './header.scss';\n\nconst Header = () => {\n    return(\n        <header className=\"main\">\n            <div className=\"container\">\n                <nav className=\"logo\">\n                    <img src={logo} className=\"img-fluid\" alt=\"logo\"/>\n                    <span>Dummy Data</span>\n                </nav>\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","const URL = process.env.REACT_APP_APIURL;\n\nconst fetchPosts = async () => {\n    try {\n        const response = await fetch('https://jsonplaceholder.typicode.com/posts');\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        return error;\n    }\n}\n\nexport {\n    fetchPosts\n};","import React from \"react\";\nimport './card.scss';\n\nconst Card = ({cardData:{id, title, body, imgSrc}, postHandle}) => {\n    return(\n        <div className=\"card\">\n            <div className=\"card-body\">\n                {id &&\n                    <figure>\n                        <img src={imgSrc} className=\"img-fluid\" alt={`post${id}`} />\n                    </figure>\n                }\n                {title && \n                    <h5 className=\"card-title\">\n                        {title}\n                    </h5>\n                }\n                {body && \n                    <p>{body}</p>\n                }\n                \n            </div>\n            <div className=\"card-overlay\" onClick={()=>postHandle({title, body, imgSrc})}>\n                \n            </div>\n        </div>\n    )\n}\nexport default Card;","import React from 'react';\nimport './search.scss';\n\nconst Search = ({searchInput, placeholder}) => {\n    return(\n        <div className=\"search-area mb-4\">\n            <input type=\"search\" onChange={(e)=> searchInput(e.target.value)} placeholder={placeholder} className=\"form-control\" />\n        </div>\n    )\n}\n\nexport default Search;","import React, {useState} from 'react';\nimport './pagination.scss';\n\nconst Pagination = ({postsPerPage, totalPost, paginate}) => {\n\n    const pageNumber = [];\n\n    for(let i = 1; i<= Math.ceil(totalPost / postsPerPage); i++){\n        pageNumber.push(i);\n    }\n\n    const [currentPagination, setCurrentPagination] = useState(1);\n    const [paginationOnce] = useState(5);\n\n    const lastPagiIndex = currentPagination * paginationOnce;\n    const firstPagiIndex = lastPagiIndex - paginationOnce;\n    const currentPaginationNumber = pageNumber.slice(firstPagiIndex, lastPagiIndex);\n\n    const prev = () => {\n        let newSet = currentPagination - 1;\n        setCurrentPagination(newSet);\n    }\n\n    const next = () => {\n        let newSet = currentPagination + 1;\n        setCurrentPagination(newSet);\n    }\n\n    return(\n        <nav aria-label=\"Page navigation example\">\n            <ul className=\"pagination\">\n                <li className={\"page-item\" + (currentPagination == 1 && \" disabled\")}>\n                    <a className=\"page-link\" onClick={() => prev()} aria-label=\"Previous\">\n                        <span aria-hidden=\"true\">&laquo;</span>\n                        <span className=\"sr-only\">Previous</span>\n                    </a>\n                </li>\n                {currentPaginationNumber.map(number => (\n                    <li className=\"page-item\" key={number}>\n                        <a onClick={() => paginate(number)} className=\"page-link\">\n                            {number}\n                        </a>\n                    </li>\n                ))}\n                <li className={\"page-item\" + (lastPagiIndex >= pageNumber.length && \" disabled\")}>\n                    <a className=\"page-link\" onClick={() => next()} aria-label=\"Next\">\n                        <span aria-hidden=\"true\">&raquo;</span>\n                        <span className=\"sr-only\">Next</span>\n                    </a>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Pagination;","import React, {\n    useEffect,\n    useState\n} from 'react';\nimport {\n    fetchPosts\n} from '../../services/services';\nimport Card from '../../components/card/card';\nimport Search from '../../components/search/search';\nimport Pagination from '../../components/pagination/pagination';\nimport { useHistory } from \"react-router-dom\";\n\n\nconst Posts = () => {\n    const [posts, setPosts] = useState([]);\n    const [loader, setLoader] = useState(false);\n    const [error, setError] = useState('');\n    const history = useHistory();\n\n    //For pagination\n    const [currentPage, setCurrentPage] = useState(1);\n    const [postsPerPage] = useState(6);\n    \n\n    //filter posts by title\n    const filterPosts = (value) => {\n        const fiteredPosts = posts.filter(post => post.title.includes(value));\n        setPosts([...fiteredPosts]);\n    }\n\n    //Redirect to post details page\n    const postHandle = (pData) => {\n        history.push({\n            pathname: '/post',\n            state: {...pData}\n        });\n    }\n\n    \n    useEffect(() => {\n\n        setLoader(true);\n\n        //fetch all posts\n        fetchPosts().then(response => {\n            setPosts([...response]);\n            setLoader(false);\n        })\n        .catch(error => {\n            setError(`${error}`);\n            setLoader(false);\n        });\n\n    }, []);\n\n    //get current posts\n    const lastPostIndex = currentPage * postsPerPage;\n    const firstPostIndex = lastPostIndex - postsPerPage;\n    const currentPosts = posts.slice(firstPostIndex, lastPostIndex);\n\n    //Change page\n    const paginate = number => setCurrentPage(number);\n\n    return (\n        loader ? \n        <h2>Loading...</h2> : \n        error ? \n        <h2 className=\"text-danger\">{error}</h2> :\n        <section className=\"posts\">\n            <Search searchInput={filterPosts} placeholder=\"Search posts by title...\"/>\n            <div className=\"row\">\n                {currentPosts.length && currentPosts.map(post => \n                    <div className=\"col-md-4\" key={post.id}>\n                        <Card cardData={{...post, imgSrc: `https://loremflickr.com/420/240?random=${post.id}`}} postHandle={postHandle}/>\n                    </div>\n                )}\n            </div>\n            <Pagination postsPerPage={postsPerPage} totalPost={posts.length} paginate={paginate} />\n        </section>\n    )\n}\nexport default Posts;","import React from 'react';\nimport './postdetails.scss';\nimport { useLocation } from 'react-router-dom';\n\nconst PostDetails = () => {\n\n   const location = useLocation();\n   const {title, body, imgSrc} = location.state;\n\n\n    return(\n        <div className=\"row post-details\">\n            <figure className=\"col-md-5\">\n                <img src={imgSrc} className=\"img-fluid\" alt=\"post\" />\n            </figure>\n            <article className=\"col-md-7\">\n                {title && <h2>{title}</h2>}\n                {body && <p>{body}</p>}\n            </article>\n        </div>\n    )\n}\n\nexport default PostDetails;","import React from 'react';\nimport './App.scss';\nimport Header from './common/header/header';\nimport Posts from './pages/posts/posts';\nimport PostDetails from './pages/postdetails/postdetails';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n   <>\n   <Header/>\n   <main className=\"container\">\n   <Router>\n    <Switch>\n      <Route path=\"/\" exact>\n        <Posts/>\n      </Route>\n      <Route path=\"/post\">\n        <PostDetails/>\n      </Route>\n    </Switch>\n    </Router>\n   </main>\n   \n   </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}